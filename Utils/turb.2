
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "noise.h"

/* info to read the texture map */
#define TEXT_URES 512
#define TEXT_VRES 4096
static unsigned char texture[TEXT_URES*TEXT_VRES];
static char *texture_name = "/Genetti/Hayden/05-10-31/512/snap0150.pbm";

#define xsize 512
#define ysize 4096

int offset=4096;
double xPeriod = 0.0;
double yPeriod = 1.0;
double turbPower = 100.0;
double turbSize = 128.0;
double zValue = 0.0;
double zInc = 0.01;

static unsigned char raster[xsize*ysize];

double turbulence(double x, double y, double size)
{
  double value = 0.0;
  double initialsize = size;
  Vector p;

  while (size >= 1.0) {
    p.x = x/size; p.y = y/size; p.z = zValue;
    value += noise(p) * size;
    size /= 2.0;
  }

  return value/(initialsize*2.0);
}

void get_texture()
{
  FILE *fp;
  int xres, yres, maxval, u, v;
        
  if ((fp = fopen(texture_name, "r")) == 0)
    { printf("Can't open %s\n", texture_name); exit(1); }
          
  fscanf(fp, "P5\n");
  if (fscanf(fp, "%d %d\n%d\n", &xres, &yres, &maxval) != 3)
    { printf("Error reading header\n"); exit(1); }
        
  if (xres != TEXT_URES || yres != TEXT_VRES)
    { printf("Invalid size for texture map\n"); exit(1); }
          
  for ( v=0 ; v<yres ; v++ ) 
    for ( u=0 ; u<xres ; u++ )
      texture[v+u*TEXT_VRES] = (unsigned char) getc(fp);

  fclose(fp);

  printf("Read texture %s (%dx%d)\n", texture_name, TEXT_URES, TEXT_VRES);
}

double texture_lookup(double i, double j)
{
  double value;

  if (i<0 || i>=xsize) return 1.0;

  if (i > xsize/2) {
    value = (i-xsize/2) / (xsize/2 - 1.0);
  } else {
    value = (xsize/2-i) / (xsize/2 - 1.0);
  }

  return value;
}

int main()
{
  int i,j;
  double xyValue;
  double sineValue;
  Vector p;
  int rindex;
  FILE *fp;

  initnoise();

     rindex = 0;
     for ( j=0 ; j<ysize ; j++ ) {

       for ( i=0 ; i<xsize ; i++,rindex++ ) {

         // Just make a gradient along Y axis
//         xyValue = texture_lookup(i, j);

         // Try adding some turbulence before looking up
         xyValue = texture_lookup(i-turbPower/2.0+turbPower*turbulence(i*2.5,j*2.5,turbSize), j);

//         xyValue = (j+turbPower*turbulence(i,j,turbSize)) / 255.0;  // range is [0.0,1.0]

//         sineValue = turbulence(i, j, turbSize);

 //      if (i==0)
  //       printf("i=%d j=%d turb=%lf\n", i, j, sineValue);

         if (xyValue < 0.0) raster[rindex] = 0;
         else if (xyValue > 1.0) raster[rindex] = 255;
         else raster[rindex] = (unsigned char) (xyValue * 255);


#if 0
         xyValue = i*xPeriod / ysize + (j+offset%xsize)*yPeriod / xsize  +
                   turbPower * turbulence(i*0.2, j*0.2, turbSize);
         sineValue = fabs(sin(xyValue*M_PI));

         raster[rindex] = (unsigned char) (sineValue * 255);
#endif

       }

     }

  fp = fopen("test.pgm", "wb");
  if (!fp) { printf("Can't open test.pgm\n"); exit(1); }
  fprintf(fp, "P5\n");
  fprintf(fp, "%d %d\n%d\n", xsize, ysize, 255);
  fwrite(raster, sizeof(unsigned char), xsize*ysize, fp);
  fclose(fp);

  zValue += zInc;

}
